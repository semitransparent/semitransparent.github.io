<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>semi_transparent</title><link href="https://semitransparent.github.io/" rel="alternate"></link><link href="https://semitransparent.github.io/feeds/all.atom.xml" rel="self"></link><id>https://semitransparent.github.io/</id><updated>2016-09-02T23:50:00+02:00</updated><entry><title>Manipulating 'Langenscheid Jugendwort des Jahres'</title><link href="https://semitransparent.github.io/manipulating-langenscheid-jugendwort-des-jahres.html" rel="alternate"></link><published>2016-09-02T23:50:00+02:00</published><author><name>by semi_transparent. Hosted by github</name></author><id>tag:semitransparent.github.io,2016-09-02:manipulating-langenscheid-jugendwort-des-jahres.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Manipulating the election of the German youth word of the year&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The German Publisher Langenscheid once a year holds a poll for the 'youth word of the year'. Like every time this year 30 more or less hilarious words can be voted for by the beloved social media community. Most of them are totally unknown to me. But I like one word to win: 'Tintling'.&lt;/p&gt;
&lt;p&gt;So a friend and me backtracked the voting request.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://semitransparent.github.io/images/juwo1.png" alt="mitmproxy voting request" style="width: 95%;"/&gt;&lt;/p&gt;
&lt;p&gt;It was not even HTTPS. The only protection we found against flooding was the super slow server. Just resending the request gave a nice and clean HTTP 200 response. But could this have been all? Maybe there was some more sophisticated protection in the background?&lt;/p&gt;
&lt;h1&gt;Execution&lt;/h1&gt;
&lt;p&gt;So we wrote a script that shuffels the Cookie parameters a bit and changed the User-Agent to a good looking Windows NT one. Because the server is so slow multiple requests are send in parallel to make the voting a bit faster. We will publish the code as soon as this is fixed by Langenscheidt.
To prove our script works we took another entry which was not already #1 and started the voting. Here is a screenshot of "Googleschreiber" before we started.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://semitransparent.github.io/images/juwo2.png" alt="Poll before" style="width: 80%;"/&gt;&lt;/p&gt;
&lt;p&gt;And here is one after a few minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://semitransparent.github.io/images/juwo3.png" alt="Poll after" style="width: 80%;"/&gt;&lt;/p&gt;
&lt;p&gt;We were able to increase the position by 0.1% using 2000 requests. A lot of these requests returned "0" instead of "1" so they probably did not count. Also a few of the requests did return HTTP 500 answers. In total about 100 requests were delivered to the server and returned "1". Therefore Langescheidt seems to have about 100.000 votes collected already. 
Now we were eager to boost "Googleschreiber's" counter a bit more. But using more threads the website got even slower than it already was, so we refrained from that. Also the results page did not load anymore as soon as one of us used more than than one or two requests per second. Because we did not want to DDOS anything but just show how easy the manipulation is "Googleschreiber" is still on a miserable position.&lt;/p&gt;
&lt;p&gt;Using Twitter we tried to get in touch with Langescheidt but they did not react in any way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 09/09/2016&lt;/strong&gt;&lt;br /&gt;
The result page is now completely broken, all percentages went mad.
&lt;img src="https://semitransparent.github.io/images/juwo4.png" alt="Poll after" style="width: 80%;"/&gt;&lt;/p&gt;</summary></entry><entry><title>Manipulate Opinary polls</title><link href="https://semitransparent.github.io/manipulate-opinary-polls.html" rel="alternate"></link><published>2016-09-02T17:33:00+02:00</published><author><name>by semi_transparent. Hosted by github</name></author><id>tag:semitransparent.github.io,2016-09-02:manipulate-opinary-polls.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Manipulating the results of a popular poll service&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reading some &lt;a href="http://www.welt.de/politik/deutschland/article157917484/Warum-Fluechtlinge-Mecklenburg-Vorpommern-lieben.html"&gt;news pages&lt;/a&gt; I came accross a new type of online polls. Instead of asking questions the poll allows me to move the needle of a compass and then gives a graphical feedback on how other users voted. 
&lt;img src="https://semitransparent.github.io/images/opinary2.png" alt="Screenshot" style="width: 40%;"/&gt;&lt;/p&gt;
&lt;p&gt;These polls reminded me of old online polls that could easily be manipulated by refreshing the page and voting for the same thing over and over again. But the &lt;a href="http://opinary.com/"&gt;Opinary&lt;/a&gt; poll seemed more clever. Refreshing the page led to nothing but the result I already voted for. Even after clearing the cookies my result stayed the same. In Incognito mode I was able to vote multiple times but that did not seem like a very scalable approach. The little counter told me 15.000 users had already voted and every time I refreshed the page some very annoying autoplay video started. Also it took ages to reload all the advertisements.  &lt;/p&gt;
&lt;p&gt;To find a bit way I fired up mitmproxy once more and found the request done to create a new vote.
&lt;img src="https://semitransparent.github.io/images/opinary3.png" alt="mitmproxy screenshot" style="width: 80%;"/&gt;&lt;/p&gt;
&lt;p&gt;First odd thing I noticed: The request is not even https so Wireshark would have been enough. Its a simple post to some remote URL and does not contain much data. &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are obiously I choose on the location in the compass, there is an id in there and a field alled &lt;code&gt;comment_auth&lt;/code&gt;. Simply resending the request did not work, the counter on the website did not increase. So I started playing with the &lt;code&gt;comment_auth&lt;/code&gt; token but the counter still stayed the same. Therefore some more sphisticated function had to be in place in that generates &lt;em&gt;valid&lt;/em&gt; tokens for the API. In order to find it I went into the glorious Chrome debugger and deobfuscated the Code. By setting a breakpoint I was able find the function call that generates the &lt;code&gt;comment_auth&lt;/code&gt; token. Lukily the .coffee source files of the complete plugin where delivered with the compiled .js so I did not have to deal with the obfuscated JavaScript for long. This is perfect for debugging but why would you do this in a production instance?&lt;br /&gt;
Digging my way trough the function calls I ended up at a promising file. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// via: http://stackoverflow.com/a/2117523/2511985

function getUniqueId(){
  var str = &amp;#39;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&amp;#39;;
  return str.replace(/[xy]/g, function(c) {
    var r = Math.random()*16|0, v = c == &amp;#39;x&amp;#39; ? r : (r&amp;amp;0x3|0x8);
    return v.toString(16);
  });
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Props for naming the stackoverflow thread the code orginates from, but its just some generic GUID generation. I triple checked the call stack but that was definitly the generator for the &lt;code&gt;comment_auth&lt;/code&gt; field in the request. So why did my manual manipulation of the GUID did not work? Maybe the number of users that voted was not updated in realtime?&lt;/p&gt;
&lt;p&gt;To find that out I wrote a small script that constructs a vote request every second. Then I measured how many votes are created by real users during a 8 minute timeframe. After that I fired up my script and measured for 8 more minutes. The results met my expectations. I was able to take control of the needle and vote 8x more than all other voters in that timeframe combined.
&lt;img src="https://semitransparent.github.io/images/opinary5.png" alt="graph of vote results" style="width: 80%;"/&gt;&lt;/p&gt;
&lt;p&gt;Using this glitch opinary polls can easily be manipulated to show the desired result. Opinary is used by several German news sites like Spiegel Online, welt.de and the Huffington Post. I tried to get in touch with Opinary but there has not been any reaction to my mails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 10/09/2016&lt;/strong&gt;&lt;br /&gt;
Because there was no reaction from Opinary at all I went to write to the Newspapers that use their service. For demonstration purpose I needed some undeniable data. Did you know Donald Trump rapidly gained trust among Focus Online readers today? Also the new iPhone sucks massively.
&lt;img src="https://semitransparent.github.io/images/opinary7.png" alt="graph of vote results" style="width: 80%;"/&gt;
&lt;img src="https://semitransparent.github.io/images/opinary8.png" alt="graph of vote results" style="width: 80%;"/&gt;&lt;/p&gt;
&lt;p&gt;Using these images I mailed the newspapers that use Opinary.  &lt;/p&gt;</summary></entry><entry><title>bwin.com odds API</title><link href="https://semitransparent.github.io/bwincom-odds-api.html" rel="alternate"></link><published>2016-08-30T16:51:00+02:00</published><author><name>by semi_transparent. Hosted by github</name></author><id>tag:semitransparent.github.io,2016-08-30:bwincom-odds-api.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Searching for and finding an API to poll betting odds from bwin.com by a man-in-the-middle on their official app&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I was searching for interesting statistical data the other day and stumbled across online betting. I never really got into gambling at all and was surprised how popular it is. The market is littered with more or less shady offers. Anyhow none of these seems to be pretty chatty about their data or even has an official API. Therefore I tried to analyze several websites just to find most of those betting providers try to obfuscate their backends API calls as good as they can.
A little disappointed I picked bwin.com (because they offer a hell of a lot of betting data) and started to analyze their mobile application for more insights in how their API works. Using &lt;a href="https://mitmproxy.org/"&gt;mitmproxy&lt;/a&gt; I was able to man-in-the-middle the calls to the backend API. There is a good tutorial on how to intercept phone connection with mitmproxy &lt;a href="http://www.digitalinternals.com/mobile/android-sniff-http-https-traffic-without-root/490/"&gt;here&lt;/a&gt;. It turns out this API is much better to use than the one used by the website.&lt;/p&gt;
&lt;p&gt;First odd thing I noticed is that the official bwin app is not in Playstore but needs to be downloaded from their site. This leads to a pretty hilarious website and makes bwin assure you about 5 times this app really is legit and you should absolutely install it despite all warnings.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://semitransparent.github.io/images/bwin4.jpg" alt="Screenshot" style="width: 95%;"/&gt;&lt;/p&gt;
&lt;p&gt;So I downloaded the app and set up the capture.  &lt;/p&gt;
&lt;p&gt;Starting the app caused lot of pollution in mimproxy. From a fresh start I counted 19 connections made to different endpoints. No less than 4 analytics networks are queried by the bwin app: appsflyer.com, eumcollector, mixpanel and google-analytics. Even before I had any interaction with the app my carrier name, device, network type and other things were transferred to third party servers.&lt;/p&gt;
&lt;p&gt;Another call caught my attention.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET https://media.itsfogo.com/media/mobile/COM/sports/android/SB_POS3006_config.txt
    ← 200 text/plain 3.6kB 138ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;itsfogo.com seems to act as a shared repository for all services offered by the company behind bwin, bwin.party digital entertainment plc in Gibraltar. The certificate has alt names registered for a list of 38! other domains. Most of these domains are clearly related to online gambling and betting like foxybingo.com or partypoker.com. Two domains stick out: intertrader.com claims to be a more serious brooking website and theborgata.com is an actual Casio in Atlantic city (which offers online gambling as well). There is an Outlook mail server hosted at mail.itsfogo.com.&lt;/p&gt;
&lt;p&gt;Like the name already suggests &lt;code&gt;SB\_POS3006_config.txt&lt;/code&gt; is a configuration file for the Android client. The JSON content is very readable. &lt;code&gt;"application_disabled": false&lt;/code&gt; for example looks like a kill switch for the app and &lt;code&gt;"application_disabled_comment": "show maintenance message"&lt;/code&gt; explains what happens when its triggered. (Who puts comments in the content of a configuration json file?)&lt;br /&gt;
Things could have ended fast with &lt;code&gt;"betting_api_url": "",&lt;/code&gt; but its empty. So we get to know that poker is currently not 'cross-sold' to AT, DE and UA and the latest supported app version is 69.&lt;br /&gt;
The next thing of interest is &lt;code&gt;"legacy_device_url": "https://lite.bwin.com"&lt;/code&gt;. It links to a reduced version of bwin which uses a bit less cluttered API and is also free from a blinking Flash advertisement. If I'd be into online gambling I'd definitely prefer that page over bwin.com. Also we see a long list of which advertisement is currently active in which country like the &lt;code&gt;Casino slider short appearance promotion&lt;/code&gt;. Last interesting thing is the update .apk URL &lt;code&gt;http://media.itsfogo.com/media/upload/mobile/android/apk/bwinlive.apk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All the analytics and configuration left aside two domains are left.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET https://api.bwin.com/V3/GeoLocation.svc/IP/
   ← 200 application/json 213B 165ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bwin seems to run their own geolocation API. Because its IP based accuracy is just on a city level in my case. All api.bwin.com calls look very generic and might very well be shared between the website and the mobile app. There is another call to get the current server time and one that contains localized tutorials and names for a lot of sports clubs and countries around the world.&lt;/p&gt;
&lt;p&gt;I had one promising domain left: mobileapi.bwinlabs.com.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET https://en.mobileapi.bwinlabs.com/api/android/v2/events/ms2common?leagueid=43&amp;amp;regionid=17&amp;amp;overview_or_events_switch=...
    ← 200 application/json 18.13kB 247ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good thing is, the response contains betting odds for several soccer related events. Bad thing is all parameters are URL encoded and the response mixes up several tournaments and types of betting. In order to understand the meanings of the request fields I clicked on the 'soccer' category and narrowed my search to only Premier League games. Decoding the URL leads to something better readable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://en.mobileapi.bwinlabs.com/api/android/v2/events/ms2common?leagueid=46&amp;amp;regionid=14&amp;amp;overview_or_events_switch={events:10,locations:1,leagues:1,keep_overview:true}&amp;amp;sportid=4&amp;amp;markettemplateid=14&amp;amp;overview=&amp;amp;events=&amp;amp;page_size=500&amp;amp;tournamentlist=true&amp;amp;country=uk&amp;amp;ipcountry=uk&amp;amp;partnerid=com.bwinlabs.betdroid_16.7.17&amp;amp;label=com&amp;amp;mediaprovider=unas,perform
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/api/android/v2/events/ms2common&lt;/code&gt; is the path for all requests going to the API. Maybe there is another API used for iPhones. I have no clue what ms2common is. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sportid=4&lt;/code&gt; clearly marks the sport to search bets for. Basketball is 7, Tennis 5, Ice Hockey 12, Handball 16, Volleyball 18.&lt;br /&gt;
&lt;code&gt;regionid=14&lt;/code&gt; marks I was searching for soccer in England. RegionIDs are consistent over sports so if Germany is region 17 in soccer it will also be in handball. Of course not every country hosts bets of every sport. &lt;code&gt;leagueid=46&lt;/code&gt; marks Premier League.&lt;br /&gt;
These three parameters can easily be obtained from &lt;a href="https://lite.bwin.com/en/Sports/Main"&gt;bwin lite&lt;/a&gt;. Clicking trough the table the URL encodes &lt;code&gt;https://lite.bwin.com/en/sports/main/regionID/sportID/leagueID&lt;/code&gt;.&lt;br /&gt;
The other parameters control how many and what information are packed into the JSON. So I started stripping the request. &lt;code&gt;markettemplateid=17&lt;/code&gt; seems to control if only popular offers should be shown or all of them. Removing lead to a 7MB JSON file containing a pretty good list of games and betting odds. With the 'page_size' attribute this huge JSON can be shrinked by only showing the latest n offerings. 
All other request parameters except the &lt;code&gt;events&lt;/code&gt; keyword can be removed. The original request headers are not needed as well.&lt;/p&gt;
&lt;p&gt;Using that knowledge coding a Python wrapper for basic odd requests is very simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getOdds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regionID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sportID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leagueID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;regionid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;regionID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;sportid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sportID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;leagueid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;leagueID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;page_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;partnerid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;#Can be anything&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://en.mobileapi.bwinlabs.com/api/android/v2/events/ms2common&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getOdds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Query for 10 games&lt;/span&gt;

&lt;span class="c1"&gt;#Working with the response&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;#Iterate over all the games&lt;/span&gt;
    &lt;span class="n"&gt;odds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;non_live&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;games&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;details&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;odds1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;odds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;oddsX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;odds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;odds2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;odds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;odds1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;oddsX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;odds2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#Format the output nicely&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   Manchester Utd - Manchester City  2.35   3.3   2.9
        Bournemouth - West Bromwich   2.0   3.3  3.75
        Arsenal FC - Southampton FC  1.53  4.25   5.5
                Burnley - Hull City   2.2   3.2   3.3
  Middlesbrough FC - Crystal Palace   2.2   3.2   3.3
     Stoke City - Tottenham Hotspur   4.5   3.6  1.75
          West Ham United - Watford  1.85   3.6   4.0
      Liverpool FC - Leicester City  1.62  3.75   5.5
          Swansea City - Chelsea FC   5.5   3.8  1.57
               Sunderland - Everton   3.4   3.3   2.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In general the returned JSON is pretty readable but contains a lot of redundant information.&lt;br /&gt;
Further research could include the mapping from names to IDs and using the API to place an actual bet.&lt;/p&gt;</summary></entry></feed>